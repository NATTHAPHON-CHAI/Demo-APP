import ast
import logging                   
import re                        
import traceback                 
from deep_translator import GoogleTranslator  
from dotenv import load_dotenv   
import streamlit as st           
import os                        
from datetime import datetime    
import pytz                      
import json                      
import uuid                      
import shutil                    
from supervisor import SupervisorAgent, PLOT_DIR  
from datahandle import DataHandler   
import matplotlib.pyplot as plt  
import numpy as np               

# ‡πÇ‡∏´‡∏•‡∏î environment variables ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env
load_dotenv()

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
APP_NAME = "(DEMO) Data Analysis Assistant üìä"  # ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
BASE_SESSION_DIR = "sessions"            # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
TEMP_UPLOAD_DIR = "temp_uploads"         # ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏Ç‡∏≠‡∏á Streamlit
st.set_page_config(
    page_title=APP_NAME,         # ‡∏ä‡∏∑‡πà‡∏≠‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    page_icon="üêò",              # ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    layout="wide",               # ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (wide ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠)
    initial_sidebar_state="expanded"  # ‡πÉ‡∏´‡πâ sidebar ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
)

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Custom CSS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
st.markdown("""
<style>
    /* ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á container ‡∏´‡∏•‡∏±‡∏Å */
    .main {
        background-color: #343541;
        padding-bottom: 80px;
    }
    /* ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ */
    .user-message {
        background-color: #40414f;
        color: #d1d5db;
        padding: 15px 20px;
        margin: 20px 0;
        border-radius: 8px;
        max-width: 85%;
        align-self: flex-end;
    }
    /* ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢ (Assistant) */
    .assistant-message {
        color: #d1d5db;
        border-radius: 8px;
        max-width: 85%;
        align-self: flex-start;
    }
    /* ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session */
    .session-info {
        background-color: #2e7d32;
        color: white;
        padding: 10px;
        border-radius: 5px;
        margin: 5px 0;
    }
    /* ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏•‡∏±‡∏Å‡∏©‡∏ì‡∏∞‡∏Ç‡∏≠‡∏á container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö input ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á */
    .fixed-input-container {
        position: fixed;
        bottom: 0;
        margin-top: 20px;
        width: 100%;
        background-color: #343541;
        padding: 10px;
        border-top: 1px solid #565869;
    }
    /* ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á input field ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° */
    .stTextInput input {
        background-color: #40414f;
        color: white;
        border: 1px solid #565869;
        border-radius: 5px;
        width: 100%;
        padding: 10px;
    }
    /* ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° */
    .stButton button {
        background-color: #565869;
        color: white;
        border: none;
        padding: 8px 16px;
        border-radius: 5px;
        transition: background-color 0.3s;
    }
    .stButton button:hover {
        background-color: #6e7087;
    }
    /* ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü */
    .plot-container {
        width: 100%;
        max-width: 800px;
        margin: 20px auto;
        padding: 10px;
        background-color: #2d2d3a;
        border-radius: 8px;
    }
    /* ‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á Sidebar */
    .sidebar .sidebar-content {
        background-color: #262730;
    }
    /* ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (success, warning, error) */
    .success-message {
        background-color: #1a472a;
        color: #2ecc71;
        padding: 10px;
        border-radius: 5px;
        margin: 5px 0;
    }
    .warning-message {
        background-color: #7d4a00;
        color: #f39c12;
        padding: 10px;
        border-radius: 5px;
        margin: 5px 0;
    }
    .error-message {
        background-color: #700000;
        color: #e74c3c;
        padding: 10px;
        border-radius: 5px;
        margin: 5px 0;
    }
</style>
""", unsafe_allow_html=True)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á JSON (dict ‡∏´‡∏£‡∏∑‡∏≠ list) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏∑‡πâ‡∏≠‡∏á (indent) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
def convert_json_to_text(data, indent=0):
    """
    ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON (dict ‡∏´‡∏£‡∏∑‡∏≠ list) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    Parameters:
        data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• JSON (dict ‡∏´‡∏£‡∏∑‡∏≠ list)
        indent: ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏∑‡πâ‡∏≠‡∏á (indentation) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
    Returns:
        ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
    """
    spaces = " " * indent
    if isinstance(data, dict):
        lines = []
        for key, value in data.items():
            # ‡∏´‡∏≤‡∏Å value ‡πÄ‡∏õ‡πá‡∏ô dict ‡∏´‡∏£‡∏∑‡∏≠ list ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏ö‡∏ö recursive ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏¢‡∏∑‡πâ‡∏≠‡∏á
            if isinstance(value, (dict, list)):
                lines.append(f"{spaces}{key.capitalize()}:")
                lines.append(convert_json_to_text(value, indent=indent + 2))
            else:
                lines.append(f"{spaces}{key.capitalize()}: {value}")
        return "\n".join(lines)
    elif isinstance(data, list):
        lines = []
        for index, item in enumerate(data):
            lines.append(f"{spaces}- {convert_json_to_text(item, indent=indent + 2)}")
        return "\n".join(lines)
    else:
        return f"{spaces}{data}"

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á JSON (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠ dict) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
def json_to_text(json_input):
    """
    ‡∏£‡∏±‡∏ö input ‡πÄ‡∏õ‡πá‡∏ô JSON string ‡∏´‡∏£‡∏∑‡∏≠ dict ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    Parameters:
        json_input: JSON string ‡∏´‡∏£‡∏∑‡∏≠ dict
    Returns:
        ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    """
    # ‡∏´‡∏≤‡∏Å input ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á ‡πÉ‡∏´‡πâ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô dict ‡∏Å‡πà‡∏≠‡∏ô
    if isinstance(json_input, str):
        try:
            data = json.loads(json_input)
        except json.JSONDecodeError:
            # ‡∏´‡∏≤‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ input ‡πÄ‡∏î‡∏¥‡∏°
            return json_input
    else:
        data = json_input

    return convert_json_to_text(data)

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ GoogleTranslator
def translate_func(target_lang, text):
    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° JSON ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡∏Å‡πà‡∏≠‡∏ô
    normal_text = json_to_text(text)
    max_char = 5000
    if len(normal_text) <= max_char:
        try:
            # ‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà target_lang ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏ß‡πâ
            translated = GoogleTranslator(source='auto', target=target_lang).translate(normal_text)
            return translated
        except:
            # ‡∏´‡∏≤‡∏Å‡πÅ‡∏õ‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
            return normal_text
    else:
        return normal_text

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö API key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö supervisor (LLM ‡∏´‡∏•‡∏±‡∏Å) ‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
def get_supervisor_api_key(model):
    if model == "typhoon-v1.5x-70b-instruct":
        return os.getenv("TYPHOON_API_KEY")
    elif model == "typhoon-v2-70b-instruct":
        return os.getenv("TYPHOON_API_KEY")
    elif model == "gpt-4o-mini":
        return os.getenv("OPENAI_API_KEY")
    else:
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö API key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö agent (‡πÄ‡∏ä‡πà‡∏ô PandasAgent) ‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
def get_agent_api_key(model):
    if model == "typhoon-v1.5x-70b-instruct":
        return os.getenv("PANDAS_API_KEY")
    elif model == "typhoon-v2-70b-instruct":
        return os.getenv("PANDAS_API_KEY")
    elif model == "gpt-4o-mini":
        return os.getenv("OPENAI_API_KEY")
    else:
        return None
    
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö API key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö explanner (LLM ‡∏¢‡πà‡∏≠‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢) ‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
def get_explanne_tool_api_key(model):
    if model == "typhoon-v1.5x-70b-instruct":
        return os.getenv("EXPLANNER_API_KEY")
    elif model == "typhoon-v2-70b-instruct":
        return os.getenv("EXPLANNER_API_KEY")
    elif model == "gpt-4o-mini":
        return os.getenv("OPENAI_API_KEY")
    else:
        return None

# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö base URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API ‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
def get_model_base_url(model):
    if model == "typhoon-v1.5x-70b-instruct":
        return "https://api.opentyphoon.ai/v1"
    elif model == "typhoon-v2-70b-instruct":
        return "https://api.opentyphoon.ai/v1"
    elif model == "gpt-4o-mini": # ‡∏î‡∏π‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: https://www.restack.io/p/openai-python-answer-base-url-cat-ai
        return "https://api.openai.com/v1"
    else: 
        return "https://api.opentyphoon.ai/v1"

# =======================================================================
# ‡∏Ñ‡∏•‡∏≤‡∏™ Session ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ session
# =======================================================================
class Session:
    def __init__(self, session_id=None):
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î session_id ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ uuid
        self.session_id = session_id or str(uuid.uuid4())
        # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà session ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö UTC
        self.created_at = datetime.now(pytz.UTC).strftime('%Y-%m-%d %H:%M:%S')
        # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô session (‡∏ó‡∏±‡πâ‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢)
        self.messages = []
        # ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        self.uploaded_file = None
        # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
        self.file_path = None
        # ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô session ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
        self.last_activity = self.created_at
        
    def to_dict(self):
        """
        ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á session ‡πÄ‡∏õ‡πá‡∏ô dict ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå JSON
        """
        return {
            'session_id': self.session_id,
            'created_at': self.created_at,
            'messages': self.messages,
            'file_path': self.file_path,
            'last_activity': self.last_activity
        }
    
    @classmethod
    def from_dict(cls, data):
        """
        ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á Session ‡∏à‡∏≤‡∏Å dict ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
        """
        session = cls(session_id=data['session_id'])
        session.created_at = data['created_at']
        session.messages = data['messages']
        session.file_path = data['file_path']
        session.last_activity = data.get('last_activity', datetime.now(pytz.UTC).strftime('%Y-%m-%d %H:%M:%S'))
        return session

    def update_activity(self):
        """
        ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô session
        """
        self.last_activity = datetime.now(pytz.UTC).strftime('%Y-%m-%d %H:%M:%S')

# =======================================================================
# ‡∏Ñ‡∏•‡∏≤‡∏™ SessionManager ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ session ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏£‡πâ‡∏≤‡∏á, ‡πÇ‡∏´‡∏•‡∏î, ‡∏•‡∏ö, ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
# =======================================================================
class SessionManager:
    def __init__(self, base_dir=BASE_SESSION_DIR):
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö session
        self.base_dir = base_dir
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        self.ensure_base_dir()
        
    def ensure_base_dir(self):
        os.makedirs(self.base_dir, exist_ok=True)
        
    def get_session_dir(self, session_id):
        # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á session ‡∏ï‡∏≤‡∏° session_id
        return os.path.join(self.base_dir, session_id)
    
    def create_session(self):
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        session = Session()
        session_dir = self.get_session_dir(session.session_id)
        os.makedirs(session_dir, exist_ok=True)
        self.save_session(session)
        return session
    
    def save_session(self, session):
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏•‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå session.json ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á session
        session_dir = self.get_session_dir(session.session_id)
        os.makedirs(session_dir, exist_ok=True)
        session_file = os.path.join(session_dir, 'session.json')
        with open(session_file, 'w') as f:
            json.dump(session.to_dict(), f)
    
    def load_session(self, session_id):
        # ‡πÇ‡∏´‡∏•‡∏î session ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå session.json ‡∏ï‡∏≤‡∏° session_id ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
        session_dir = self.get_session_dir(session_id)
        session_file = os.path.join(session_dir, 'session.json')
        if os.path.exists(session_file):
            with open(session_file, 'r') as f:
                try:
                    data = json.load(f)
                    return Session.from_dict(data)
                except json.JSONDecodeError:
                    return None
        return None
    
    def delete_session(self, session_id):
        # ‡∏•‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á session ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ (‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô session ‡∏ô‡∏±‡πâ‡∏ô)
        session_dir = self.get_session_dir(session_id)
        if os.path.exists(session_dir):
            shutil.rmtree(session_dir)
    
    def list_sessions(self):
        # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ session ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô)
        if not os.path.exists(self.base_dir):
            return []
        sessions = []
        for session_id in os.listdir(self.base_dir):
            session = self.load_session(session_id)
            if session:
                sessions.append(session)
        return sorted(sessions, key=lambda x: x.last_activity, reverse=True)

# =======================================================================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö session)
# =======================================================================
def save_uploaded_file(uploaded_file, session_id):
    """
    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡∏á‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á session
    Parameters:
        uploaded_file: ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î (Streamlit UploadedFile)
        session_id: ID ‡∏Ç‡∏≠‡∏á session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    Returns:
        ‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ None
    """
    if uploaded_file is not None:
        session_dir = os.path.join(BASE_SESSION_DIR, session_id)
        os.makedirs(session_dir, exist_ok=True)
        
        file_path = os.path.join(session_dir, uploaded_file.name)
        try:
            with open(file_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            logging.info(f"File saved successfully at {file_path}")
            return file_path
        except Exception as e:
            logging.error(f"Error saving file: {e}")
            st.error(f"Error saving file: {e}")
            return None
    return None


def delete_session_file(session_id):
    """
    ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á session ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡πÑ‡∏ü‡∏•‡πå session.json
    Parameters:
        session_id: ID ‡∏Ç‡∏≠‡∏á session ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå
    """
    session_dir = os.path.join(BASE_SESSION_DIR, session_id)
    if os.path.exists(session_dir):
        for file in os.listdir(session_dir):
            if file != 'session.json':
                os.remove(os.path.join(session_dir, file))

# =======================================================================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
# ‡πÉ‡∏ä‡πâ DataHandler ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞ preprocess ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
# =======================================================================

@st.cache_data
def load_data(file_path, session_id):
    if not file_path:
        st.error("No file path provided.")
        return None

    data_handler = DataHandler({})
    file_key = os.path.splitext(os.path.basename(file_path))[0]
    data_handler.dataset_paths[file_key] = file_path
    try:
        data_handler.load_data()
        data_handler.preprocess_data()
    except FileNotFoundError as e:
        st.error(f"Error loading file: {e}")
        logging.error(f"Error loading file: {e}")
        return None
    return data_handler
# =======================================================================
# Initializations: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏ô session state ‡∏Ç‡∏≠‡∏á Streamlit
# =======================================================================
if 'session_manager' not in st.session_state:
    st.session_state['session_manager'] = SessionManager()
if 'current_session' not in st.session_state:
    st.session_state['current_session'] = None
if 'data_handler' not in st.session_state:
    st.session_state['data_handler'] = DataHandler({})
if 'supervisor_agent' not in st.session_state:
    st.session_state['supervisor_agent'] = None
if 'messages' not in st.session_state:
    st.session_state['messages'] = []
if 'initial_message_sent' not in st.session_state:
    st.session_state['initial_message_sent'] = False 

# =======================================================================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ session (‡πÄ‡∏£‡∏¥‡πà‡∏° session ‡πÉ‡∏´‡∏°‡πà, ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô session, ‡∏•‡∏ö session, ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤)
# =======================================================================
def start_new_session():
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
    Returns:
        instance ‡∏Ç‡∏≠‡∏á Session ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏´‡∏°‡πà
    """
    session = st.session_state['session_manager'].create_session()
    st.session_state['current_session'] = session
    st.success(f"Started new session: {session.session_id[:8]}")
    return session

def switch_session(session_id: str, selected_model: str, temperature: float):
    """
    ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏õ‡πÉ‡∏ä‡πâ session ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ SupervisorAgent ‡∏ï‡∏≤‡∏°‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞ temperature ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    """
    try:
        # ‡πÇ‡∏´‡∏•‡∏î session ‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
        session = st.session_state['session_manager'].load_session(session_id)
        if not session:
            raise ValueError(f"Session with ID {session_id} not found.")

        # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        st.session_state['current_session'] = session
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô session ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if session.file_path and os.path.exists(session.file_path):
            # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á session ‡∏ô‡∏±‡πâ‡∏ô
            st.session_state['data_handler'] = load_data(session.file_path, session.session_id)
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î dataset key ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
            dataset_key = os.path.splitext(os.path.basename(session.file_path))[0]
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á SupervisorAgent
            st.session_state['supervisor_agent'] = SupervisorAgent(
                temperature=temperature,
                base_url=get_model_base_url(selected_model),
                model_name=selected_model,
                dataset_paths={dataset_key: session.file_path},
                dataset_key=dataset_key,
                session_id=session.session_id,
                supervisor_api_key=get_supervisor_api_key(selected_model),
                agent_api_key=get_agent_api_key(selected_model),
                explanner_api_key=get_explanne_tool_api_key(selected_model),
            )

            logging.info(f"Switched to session {session_id} with dataset {dataset_key}")
        else:
            # ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï data handler ‡πÅ‡∏•‡∏∞ agent
            st.session_state['data_handler'] = DataHandler({})
            st.session_state['supervisor_agent'] = None
            st.warning("‚ö†Ô∏è This session has no dataset. Please upload a file to continue.")

    except Exception as e:
        logging.error(f"Error switching session: {str(e)}")
        logging.error(traceback.format_exc())
        st.error(f"Error switching session: {str(e)}")


def delete_current_session():
    """
    ‡∏•‡∏ö session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡πÉ‡∏ô session state
    """
    if st.session_state['current_session']:
        session_id = st.session_state['current_session'].session_id
        st.session_state['session_manager'].delete_session(session_id)
        st.session_state['current_session'] = None
        st.session_state['supervisor_agent'] = None
        st.session_state['data_handler'] = DataHandler({})
        st.success(f"Session {session_id[:8]} deleted")

def clear_chat_history():
    """
    ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤‡πÉ‡∏ô session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    """
    if st.session_state['current_session']:
        st.session_state['current_session'].messages = []
        st.session_state['session_manager'].save_session(st.session_state['current_session'])
        if st.session_state['supervisor_agent']:
            st.session_state['supervisor_agent'].clear_memory()
        st.success("Chat history cleared")

# =======================================================================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
# =======================================================================
def handle_submit(user_input):
    """
    ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ:
      - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
      - ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô SupervisorAgent ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
      - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏á‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session
      - ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    Parameters:
        user_input: ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏õ‡πâ‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    """
    if not st.session_state['current_session']:
        st.warning("Please start or select a session first")
        return
        
    if user_input.strip() and st.session_state['supervisor_agent']:
        current_session = st.session_state['current_session']
        current_session.update_activity()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡∏á‡πÉ‡∏ô session
        message = {
            "role": "user",
            "content": user_input,
            "timestamp": datetime.now(pytz.UTC).strftime('%Y-%m-%d %H:%M:%S')
        }
        current_session.messages.append(message)
        st.session_state['messages'].append(message)
        
        try:
            with st.spinner("ü§ñ Assistant is typing..."):
                # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á SupervisorAgent ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
                response = st.session_state['supervisor_agent'].run(user_input)
                
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏á‡πÉ‡∏ô session
                message = {
                    "role": "assistant",
                    "content": response.model_dump(),
                    "timestamp": datetime.now(pytz.UTC).strftime('%Y-%m-%d %H:%M:%S')
                }
                current_session.messages.append(message)
                st.session_state['messages'].append(message)
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                st.session_state['session_manager'].save_session(current_session)
                
                # Log the response for debugging
                logging.info(f"Response from SupervisorAgent: {response.model_dump()}")
                
        except Exception as e:
            st.error(f"Error: {str(e)}")
            logging.error(f"Error in handle_submit: {str(e)}")
            logging.error(traceback.format_exc())
        
        # ‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ (‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä UI)
        st.rerun()

# =======================================================================
# ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô main ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏ß‡∏ô UI ‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô
# =======================================================================
def main():
    # ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    st.title(APP_NAME)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô Console logs ‡∏†‡∏≤‡∏¢‡πÉ‡∏ô expander (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)
    with st.expander("Thought logs.", expanded=False):
        if st.session_state['current_session']:
            for message in st.session_state['current_session'].messages:
                # ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å assistant ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• raw_response ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á
                if message["role"] == "assistant" and "raw_response" in message["content"]:
                    raw_response = message["content"]["raw_response"]
                    if (raw_response):
                        formatted_text = re.sub(r"(Thought:|Final Answer:|Action:|Action Input:|Observation:|Action Output:)", r"\n\1", raw_response)
                        formatted_text = re.sub(r"<br>\s*<br>", "<br>", formatted_text)
                        st.markdown(formatted_text, unsafe_allow_html=True)
                    else:
                        st.write("No console logs available.")
        else:
            st.write("üìú All logs.")
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Preview) ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á Console logs
    if st.session_state.get('current_session') and st.session_state['current_session'].file_path:
        dataset_key = os.path.splitext(os.path.basename(st.session_state['current_session'].file_path))[0]
        try:
            # ‡∏î‡∏∂‡∏á DataFrame ‡∏à‡∏≤‡∏Å DataHandler ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ dataset key
            df = st.session_state['data_handler'].get_data(dataset_key)
            st.subheader("Data Preview")
            st.dataframe(df)
        except Exception as e:
            st.error(f"Error loading data table: {e}")
    
    # Sidebar ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡πÜ
    with st.sidebar:
        st.title("‚öôÔ∏è Settings")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö UTC
        st.info(f"üïí UTC: {datetime.now(pytz.UTC).strftime('%Y-%m-%d %H:%M:%S')}")
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        current_session = st.session_state.get('current_session')
        if current_session:
            st.subheader("Current Session")
            st.info(f"Session ID: {current_session.session_id[:8]}")
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ session (‡∏™‡∏£‡πâ‡∏≤‡∏á session ‡πÉ‡∏´‡∏°‡πà, ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô session, ‡∏•‡∏ö session)
        st.header("Session Management")
        if st.button("üÜï New Chat Session"):
            start_new_session()

        # ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        # model_options = {
        #     "typhoon-v1.5x": "typhoon-v1.5x-70b-instruct",
        #     "typhoon-v2": "typhoon-v2-70b-instruct",
        #     "open_ai": "gpt-4o-mini"
        # }

        model_options = {
            "typhoon-v1.5x": "typhoon-v1.5x-70b-instruct",
            "typhoon-v2": "typhoon-v2-70b-instruct",
        }
        selected_model: str = st.selectbox("ü¶æ Model Settings", list(model_options.values()))
        
        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤ temperature ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡πà‡∏°‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö)
        temperature: float = st.select_slider(
            'Set temperature',
            options=[round(i * 0.1, 1) for i in range(0, 11)],
            value=0.3
        )
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ session ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        sessions = st.session_state['session_manager'].list_sessions()
        if sessions:
            st.subheader("Your Sessions")
            for session in sessions:
                with st.container():
                    col1, col2, col3 = st.columns([2, 1, 1])
                    with col1:
                        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏ü‡∏•‡πå
                        file_status = "üìÅ" if session.file_path else "üì≠"
                        st.info(f"{file_status} Session {session.session_id[:8]}\n{session.last_activity}")            
                    with col2:
                        if st.button("Switch", key=f"switch_{session.session_id}"):
                            switch_session(session.session_id, selected_model, temperature)
                    with col3:
                        if st.button("Delete", key=f"delete_{session.session_id}"):
                            if st.session_state['current_session'] and session.session_id == st.session_state['current_session'].session_id:
                                delete_current_session()
                            else:
                                st.session_state['session_manager'].delete_session(session.session_id)
        
        # ‡∏™‡πà‡∏ß‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö session ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        if st.session_state['current_session']:
            st.header("File Management")
            current_session = st.session_state['current_session']

            # ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ô session ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á file uploader
            if not current_session.file_path:
                st.warning("""
                ‚ö†Ô∏è Warning !!
                ### üì§ Upload Your Dataset
                
                To get started, please upload your data file. We support:
                - CSV files (.csv)
                - Excel files (.xls, .xlsx)
                
                Your data will be securely stored and only accessible within this session.
                """)
                
                uploaded_file = st.file_uploader(
                    "üìÇ Upload Dataset",
                    type=['csv', 'xls', 'xlsx'],
                    key='file_uploader',
                    help="Select your dataset file to begin."
                )

                if uploaded_file:
                    file_path = save_uploaded_file(uploaded_file, current_session.session_id)
                    st.session_state['initial_message_sent'] = False
                    if file_path:
                        try:
                            data_handler = load_data(file_path, current_session.session_id)
                            st.session_state['data_handler'] = data_handler
                            current_session.file_path = file_path
                            
                            # Initialize SupervisorAgent ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
                            dataset_key = os.path.splitext(uploaded_file.name)[0]
                            st.session_state['supervisor_agent'] = SupervisorAgent(
                                temperature=temperature,
                                base_url=get_model_base_url(selected_model),
                                model_name=selected_model,
                                dataset_paths={dataset_key: file_path},
                                dataset_key=dataset_key,
                                session_id=current_session.session_id, 
                                supervisor_api_key=get_supervisor_api_key(selected_model),
                                agent_api_key=get_agent_api_key(selected_model),
                                explanner_api_key=get_explanne_tool_api_key(selected_model),
                            )

                            st.session_state['session_manager'].save_session(current_session)
                            st.success(f"Successfully loaded {uploaded_file.name}")
                            # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ Assistant ‡∏´‡∏≤‡∏Å‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á
                            if not st.session_state['initial_message_sent']:
                                handle_submit(user_input="üîõ start Assistant system.")
                                st.session_state['initial_message_sent'] = True
                        except Exception as e:
                            st.error(f"Error loading file: {str(e)}")
            else:
                st.info(f"Current file: {os.path.basename(current_session.file_path)}")

    # =======================================================================
    # ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠ Chat Interface (‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞ input ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ä‡∏ó)
    
    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ä‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô session
    if st.session_state['current_session']:
        for message in st.session_state['current_session'].messages:
            with st.container():
                if message["role"] == "user":
                    st.markdown(f"""
                    <div class="user-message">
                        <div style="display: flex; justify-content: space-between;">
                            <div>{message["content"]}</div>
                        </div>
                    </div>
                    """, unsafe_allow_html=True)
                else:
                    if "sub_response" in message["content"]:
                        sub_resp = message["content"]["sub_response"]
                        # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏à‡∏≤‡∏Å pandas_agent (‡πÄ‡∏î‡∏¥‡∏°)
                        if "pandas_agent" in sub_resp:
                            pandas_response = sub_resp["pandas_agent"]
                            if pandas_response.get("execution_result"):
                                if "plots" in pandas_response["execution_result"] and pandas_response["execution_result"]["plots"]:
                                    for plot in pandas_response["execution_result"]["plots"]:
                                        with st.container():
                                            st.markdown("üêº Assistant (Pandas Agent):")
                                            st.image(os.path.join("static", "plots", plot["filename"]), width=800)
                                            with st.expander("Show plot details"):
                                                st.markdown('</div>', unsafe_allow_html=True)
                                                st.code(pandas_response["execution_result"]["output"])    
                                elif "output" in pandas_response["execution_result"]:
                                    st.markdown("üêº Assistant (Pandas Agent):")
                                    st.code(pandas_response["execution_result"]["output"])
                            if pandas_response.get("code"):
                                with st.expander("Show Code from Pandas Agent"):
                                    st.code(pandas_response["code"], language="python")
                            if pandas_response.get("explanation"):
                                st.write("üêº Assistant (Pandas Agent):")
                                explan = pandas_response["explanation"].get("explanation", "")
                                try:
                                    st.write(translate_func(target_lang='th', text=explan))
                                except Exception:
                                    st.write(explan)
                    
                        # ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö analysis_agent
                        elif "analysis_agent" in sub_resp:
                            analysis_response = sub_resp["analysis_agent"]
                            
                            # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á Assistant
                            st.markdown("""
                            <div class="assistant-message">
                                <div style="display: flex; justify-content: space-between;">
                                    <div>üßëüèª‚Äçüè´ Assistant (Analysis Agent):</div>
                                </div>
                            </div>
                            """, unsafe_allow_html=True)
                            
                            # ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
                            with st.expander("üîç Analysis Details", expanded=True):
                                # 1. ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
                                if "explanation" in analysis_response:
                                    explanation = analysis_response["explanation"]
                                    if isinstance(explanation, dict):
                                        # st.markdown(f"**‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:** {explanation.get('text', '')}")
                                        st.markdown(f"**‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:** {translate_func(target_lang='th', text=explanation.get('text', ''))}")
                                    else:
                                        st.markdown(f"**‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:** {explanation}")
                                
                                # 2. ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡πâ‡∏î (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                                if analysis_response.get("code"):
                                    with st.expander("üîç ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"):
                                        st.code(analysis_response["code"], language="python")
                                
                                # 3. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                                if analysis_response.get("execution_result"):
                                    with st.expander("üìä ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"):
                                        st.write(analysis_response["execution_result"])
                                
                                # 4. ‡πÅ‡∏™‡∏î‡∏á response (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                                if analysis_response.get("response"):
                                    st.markdown("**‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:**")
                                    st.write(analysis_response["response"])


                        # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏•‡∏±‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                        if message["content"].get("response", ""):
                            st.markdown(f"""
                            <div class="assistant-message">
                                <div style="display: flex; justify-content: space-between;">
                                    <div>ü§ñ Assistant: {message["content"].get("response", "")}</div>
                                </div>
                            </div>
                            """, unsafe_allow_html=True)
                    else:
                        st.markdown(f"""
                        <div class="assistant-message">
                            <div style="display: flex; justify-content: space-between;">
                                <div>ü§ñ Assistant: {message["content"].get("response", "")}</div>
                            </div>
                        </div>
                        """, unsafe_allow_html=True)


        # ‡∏ä‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (chat input)
        user_input = st.chat_input(
            key='user_input',
            placeholder="Type your message and press Enter"
        )
        if user_input:
            handle_submit(user_input)
    else:
        st.warning("""
            ‚ö†Ô∏è Warning !! \n 
            Dataset Required

            To start using this session, please upload a dataset file. 
            Supported file types: CSV, Excel (XLS/XLSX)

            1. Click the 'Upload Dataset' button on sidebar
            2. Select your file
            3. Wait for the file to be processed

            Once uploaded, you can start analyzing your data!
            """)
        st.info("Please start a new chat session or select an existing one.")

# =======================================================================
# ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô main ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
# =======================================================================
if __name__ == "__main__":
    main()